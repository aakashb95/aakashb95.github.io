<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://aakashb95.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aakashb95.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-17T15:34:01+00:00</updated><id>https://aakashb95.github.io/feed.xml</id><title type="html">blank</title><subtitle>Hi, I&apos;m Aakash, welcome to my corner of the internet. </subtitle><entry><title type="html">Vibe coded a multiplayer cards game</title><link href="https://aakashb95.github.io/blog/2025/vibe-coding-a-cards-game/" rel="alternate" type="text/html" title="Vibe coded a multiplayer cards game"/><published>2025-07-17T12:31:00+00:00</published><updated>2025-07-17T12:31:00+00:00</updated><id>https://aakashb95.github.io/blog/2025/vibe-coding-a-cards-game</id><content type="html" xml:base="https://aakashb95.github.io/blog/2025/vibe-coding-a-cards-game/"><![CDATA[<h3 id="why-and-what-did-i-vibe-code">Why and what did I vibe code?</h3> <p>I wanted to see if I could vibe code a functional end-to-end project with LLMs, one that my family could use.</p> <p>Check out the <a href="/projects/1_badam_satti/">Badam Satti project</a> for more details.</p> <h3 id="tldr">TLDR</h3> <ul> <li>I have a $20/month claude pro subscription. I used claude 4 opus on the website to generate a tech spec.</li> <li>Pasted that into claude code and asked it to code it out</li> <li>It could not one-shot it so I started giving step by step instructions. One feature at a time so it doesn’t get lost in the context.</li> <li>For every code change, I tested it manually. Asked it to commit changes and also update the Claude.md file with latest changes, TODOs for future and a summary so far.</li> <li>Used keywords like <code class="language-plaintext highlighter-rouge">DEEPTHINK</code>, <code class="language-plaintext highlighter-rouge">ULTRATHINK</code> to really get more out of the model.</li> <li>Since at every iteration Claude.md was updated, whenever I found context was ballooning in a session or it was going off track, I started a fresh session.</li> <li>Finally, used <a href="https://www.npmjs.com/package/@playwright/mcp">playwright-mcp</a> to give it access to the game and watched it play and debug some edge cases :D</li> </ul> <h4 id="where-to-begin">Where to begin?</h4> <p>Use the most powerful models available, I chose Claude 4 Opus and OpenAI o3 and asked them to lay out the tech spec, project structure for another LLM to implement. Full prompts can be seen here:</p> <ul> <li><a href="https://chatgpt.com/share/68781186-4570-8012-b063-5cb3ca490a66">OpenAI o3</a></li> <li><a href="https://claude.ai/public/artifacts/a2e6404a-222a-4586-804e-a51108f1955c">Claude 4 Opus</a></li> </ul> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/badam-satti/claude-4-opus-prompt.png" sizes="95vw"/> <img src="/assets/img/badam-satti/claude-4-opus-prompt.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Claude 4 Opus Prompt" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Game rules and my loud thinking </div> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/badam-satti/claude-4-opus.png" sizes="95vw"/> <img src="/assets/img/badam-satti/claude-4-opus.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Claude 4 Opus" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Claude 4 Opus response and my realization </div> </div> </div> <p><br/></p> <p>Be very verbose in your prompts, do a thought dump, LLMs are smart enough to understand the context. If they don’t, you can always clarify further.</p> <h4 id="claude-code"><a href="https://docs.anthropic.com/en/docs/claude-code/overview">Claude Code</a></h4> <p>I had used it with my API keys and was fascinated by how fast it was compared to Cursor. The subtle animations, verbs before starting a task were fun to watch.</p> <p>To install: <code class="language-plaintext highlighter-rouge">npm install -g @anthropic-ai/claude-code</code></p> <p>Then navigate to the project folder and run <code class="language-plaintext highlighter-rouge">claude</code>. <br/> For an existing repo, run <code class="language-plaintext highlighter-rouge">claude init</code> and it creates a <code class="language-plaintext highlighter-rouge">Claude.md</code> file with it’s understanding of the codebase.</p> <p>I actually installed it within cursor as an extension, so i could see the changes in my IDE.</p> <p>I pasted the Opus tech spec into the Claude Code and asked it to code it out straightaway. I thought the auto-accept edits would give it permissions to keep executing while I was away.</p> <p>It was not to be.</p> <blockquote class="twitter-tweet"><p lang="en" dir="ltr">me: damn claude code has been running for a while it probably cooked so many things by now, let me check on it<br/><br/>claude code: <a href="https://t.co/W5ah15FB24">pic.twitter.com/W5ah15FB24</a></p>&mdash; kitze (@thekitze) <a href="https://twitter.com/thekitze/status/1944720840446406726?ref_src=twsrc%5Etfw">July 14, 2025</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> <p><br/></p> <p>You will get a permission message from claude code occasionally (initially) to do some tasks.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/claude-code-permission.png" sizes="95vw"/> <img src="/assets/img/claude-code-permission.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Claude Code Permission" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Choose <code class="language-plaintext highlighter-rouge">Yes and don't ask again in this session</code> for it to auto-pilot.</p> <p>There is a plan mode and an auto-accept edits mode, you can cycle through them using <code class="language-plaintext highlighter-rouge">shift+tab</code>.</p> <p>With full autonomy, it created a simple version with pure HTML, CSS and JS.</p> <p>Now I had a list of features to implement.</p> <h4 id="building">Building</h4> <p>Claude code keeps track of how much context window has been used up for a task. At some threshold, it says use <code class="language-plaintext highlighter-rouge">/compact</code> to summarize the context to have more context window available. I almost never used that. The moment I saw that suggestion, I would ask it to update claude.md with the latest changes and then create a new session. I used <code class="language-plaintext highlighter-rouge">/clear</code> very often.</p> <p>Each new feature or improvement, would be in a separate branch, built on top of a latest working branch. I had claude do all of this.</p> <h4 id="quality-of-responses">Quality of responses</h4> <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using Claude Code either feels like God is writing your code or a monkey is and there’s no in-between.</p>&mdash; Mckay Wrigley (@mckaywrigley) <a href="https://twitter.com/mckaywrigley/status/1943722608371151222?ref_src=twsrc%5Etfw">July 11, 2025</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> <p>On fresh chats, the responses were mostly accurate but sometimes I would get the feeling if the model was lobotomized.</p> <p>So i used keywords like DEEPTHINK or ULTRATHINK to really get more out of the model. When you use these keywords, you will see what it thinks, implements a change then corrects itself by saying “oh wait, but this is not what the user wants, i have made a mistake”. Pretty intriguing to see it correct itself.</p> <p>What caught my eye was how it grepped the filesystem, it can just find the file it needs to get context. This makes me think I can use it not just to code but across variety of data, photos, documents, notes, etc.</p> <p>What would be better - RAG or giving an agent autonomy to explore the search space? Needs an experiment and would be an interesting post for another day.</p> <h4 id="providing-more-context">Providing more context</h4> <p>You can use the <code class="language-plaintext highlighter-rouge">@filename</code> to refer to a file in the project. Cursor habits. <br/> On a mac: <br/> <code class="language-plaintext highlighter-rouge">cmd+v</code> works for pasting text into the chat. <br/> <code class="language-plaintext highlighter-rouge">control+v</code> pastes images.<br/></p> <p>I found myself regularly pasting screenshots of the UI, asking it to make it responsive, cater to different screen sizes, etc.<br/> When there were some server errors, it would know because it ran <code class="language-plaintext highlighter-rouge">node</code> commands. <br/></p> <p>to give better context, especially about UI and gameplay, I gave access to a playwright-mcp server.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/claude-code-mcp.png" sizes="95vw"/> <img src="/assets/img/claude-code-mcp.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Playwright MCP" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This worked really well because it would navigate to the site, open multiple tabs to play the game</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <video controls="" class="img-fluid rounded z-depth-1" title="Claude Code Game"> <source src="/assets/video/claude-code-gameplay-web.mp4" type="video/mp4"/> Your browser does not support the video tag. </video> </div> </div> <h3 id="reflections">Reflections</h3> <p>The game turned out really well, I was able to get a lot of features done well in a really short time, and got praised heavily by my family. <br/></p> <p>On the one hand, I was really happy I could ship something that they can play and use. On the other hand, I couldn’t say <em>I made this</em> because this wasn’t <em>my</em> code. It was claude’s.</p> <ul> <li>Did I learn about Frontend? Migrating from vanilla JS, HTML, CSS to React, React router, Node, Express, Socket.io? <em>No.</em></li> <li>Did I learn how to take care of different screen sizes, zoom levels, card placements, usage of screen real estate with css, etc? <em>No.</em></li> <li>Is the UI pixel perfect? <em>No.</em></li> <li><strong>Can I make this better myself, without prompting?</strong> <br/> It would take me some time to understand the codebase, given FE isn’t my strong suit.</li> </ul> <p>From a programmer’s perspective, I learnt very little. I knew a lot of shallow stuff, like using a CDN to serve the card images, caching it on the client side for faster loading, etc., and I could direct it to do that, conduct security checks, etc.</p> <p>In the excitement, I did not do test driven vibe coding. This I will not advise inspite of knowing that claude is notorious to remove test cases</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/m0b_D2JgZgY?si=Qsf4AWSsv4URVFsa&amp;start=18" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe> <p><br/></p> <p>I also realized, deployment isn’t really solved yet, and I much prefer <a href="https://x.com/levelsio">@levelsio</a> way of deploying to a VPS, FE and BE on the same server along with a SQLite file.</p> <p>From a Product Manager’s perspective, I learnt a lot.</p> <ul> <li>Get the core product right and get it out there.</li> <li>Prioritize gameplay and time to value. Remove friction like sign in, registration, etc.</li> <li>User empathy: Cater to different screen sizes, zoom levels, etc.</li> <li>Think of product specific edge cases. Pick the one with the highest impact.</li> </ul> <p>Would I use claude code to build something where I want to learn? <br/> Not like I did for this project. I would ask it to use the <a href="https://en.wikipedia.org/wiki/Socratic_method">Socratic method</a> to help me solve my doubts, and use it as a pair programmer to bounce off ideas.</p> <p>Would I use it to get something done quickly? <em>100% yes.</em></p>]]></content><author><name></name></author><category term="tech"/><category term="tech,"/><category term="llm"/><summary type="html"><![CDATA[A note on vibe coding with Claude Code]]></summary></entry><entry><title type="html">What is an eval and how to make a good one</title><link href="https://aakashb95.github.io/blog/2025/evals/" rel="alternate" type="text/html" title="What is an eval and how to make a good one"/><published>2025-07-13T17:31:00+00:00</published><updated>2025-07-13T17:31:00+00:00</updated><id>https://aakashb95.github.io/blog/2025/evals</id><content type="html" xml:base="https://aakashb95.github.io/blog/2025/evals/"><![CDATA[<h3 id="tldr">TLDR</h3> <ul> <li>Get 15-20 traces, more the merrier. Aim for 100. Write your comments about them, analyze errors.</li> <li>Decide what a good output is and why it is a good output <br/> Have criteria like accuracy, no hallucinations, prompt adherence, etc</li> <li>use OpenAI o3 for evals, give it the input prompt, input context and LLM output to give out a rating</li> </ul> <p>I see evals as unit and integration tests combined. In the normal SWE world, functions, their inputs and outputs are deterministic and you can think of all paths the function can go through and write tests accordingly.</p> <p>For LLMs, the outputs are not deterministic. You will have to keep looking at outputs – traces(input, LLM params and outputs). Make notes about them. You need to know what a good output is and what errors look like for your use case.</p> <p>For simpler tasks like sentiment analysis, you would have a csv with text and corresponding correct output labels. Then you would run the LLM on each of the texts, get the corresponding output and compare to get an accuracy score. For such discrete outputs, we can use accuracy, precision, recall and f1-scores</p> <p>The tricky part, and most real world use cases revolve around getting text output from the LLM. A summary may be good by your standards, but not by somebody else on the team. Traditional methods like Bleu or Rouge score don’t work as business context and nuance gets lost.</p> <p>For complex tasks with varying text outputs, we need another LLM to judge the LLM output. Since text output quality is subjective, it is important to have distinct pillars/axes on which you will evaluate the output.</p> <h4 id="what-makes-a-good-output">What makes a good output?</h4> <ul> <li>It is accurate</li> <li>There are no hallucinations</li> <li>Instructions in the original prompt are adhered to</li> <li>The output covers everything from the inputs in a way that is agreeable to you (use case specific)</li> <li>If you are supplying an image to the LLM, the output should capture the info correctly from it, etc</li> </ul> <p>The judge LLM is like a teacher evaluating a student’s answer sheet. So it is imperative that the teacher has the same context as the LLM output it is judging.</p> <p>A sample eval prompt would look like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
You are an expert evaluator of &lt;TASK&gt; --&gt; set a persona, describe the task in detail

Inputs provided for the evaluation:

Original prompt given to the LLM
&lt;llm_prompt&gt;

Input context
&lt;llm_input&gt;

Output generated by the LLM
&lt;llm_output&gt;

Evaluation Criteria, Weights, &amp; Scoring (Score 1-5):

Score the llm_output from 1 to 5 for each criterion. Note the weight assigned to each criterion. Assess how well the output accurately reflects the llm_input and adheres to the llm_prompt instructions and format.

1: Poor (Significant failure)
2: Fair (Major issues)
3: Good (Mostly meets basics)
4: Very Good (Minor issues)
5: Excellent (Flawless execution)

For each feedback, give a justification.

List of your axes and weightage --&gt; this will be task specific
1. accuracy (weightage 5)
describe what accuracy means in your context

2. no hallucinations (weightage 3)
describe hallucinations

3. adhereance to inputs (weightage 3)
.
.
.

The final score is a weighted average of all the scores across all the criteria
Return a JSON
{
  {
    </span><span class="sh">"</span><span class="s">criterion</span><span class="sh">"</span><span class="s">: ...,
    </span><span class="sh">"</span><span class="s">accuracy</span><span class="sh">"</span><span class="s"> : &lt;score&gt;,
    </span><span class="sh">"</span><span class="s">justification</span><span class="sh">"</span><span class="s"> : ...
  },
  .
  .
  .
  </span><span class="sh">"</span><span class="s">overall_score</span><span class="sh">"</span><span class="s">: &lt;weighted average&gt;
  </span><span class="sh">"</span><span class="s">overall_assessment</span><span class="sh">"</span><span class="s">: ...
}
</span><span class="sh">'''</span>
</code></pre></div></div> <p>In my experience, <code class="language-plaintext highlighter-rouge">OpenAI o3</code> is the best evaluator. It takes slightly more time but is really thorough and is strict on the scoring. I also made deliberate mistakes, even subtle 2-3 word changes in a 200 word summary and it caught it.</p> <p>Aim to have 100 good samples you can run evals against, for complex tasks or lack of data you should have at least 15-20 good examples. Generate synthetic data if needed.</p> <p>Based on tasks and bandwidth:</p> <ul> <li>you could have different LLMs assess different axis mentioned in the prompt</li> <li>or use different LLMs with the same evals and do a weighted average of all the judges’ scores personally, o3 alone is sufficient</li> </ul>]]></content><author><name></name></author><category term="tech"/><category term="tech,"/><category term="llm"/><summary type="html"><![CDATA[A note on evals]]></summary></entry><entry><title type="html">Dev Setup for macOS and Linux</title><link href="https://aakashb95.github.io/blog/2024/setting-up-my-laptop/" rel="alternate" type="text/html" title="Dev Setup for macOS and Linux"/><published>2024-10-23T17:01:00+00:00</published><updated>2024-10-23T17:01:00+00:00</updated><id>https://aakashb95.github.io/blog/2024/setting-up-my-laptop</id><content type="html" xml:base="https://aakashb95.github.io/blog/2024/setting-up-my-laptop/"><![CDATA[<p>Here’s a rundown of the tools and applications I use to set up my development environment on both macOS and Linux. These have proven useful in my workflow, but your mileage may vary.</p> <h2 id="macos-setup">macOS Setup</h2> <p>First thing I do is go to Settings -&gt; Trackpad -&gt; Enable Tap to click.</p> <h3 id="package-management">Package Management</h3> <ul> <li><a href="https://brew.sh/">Homebrew</a>: The go-to package manager for macOS. Pretty much essential. But I am thinking of learning <a href="https://nixos.org/">nix</a> for more package management goodness and reproducibility.</li> </ul> <h3 id="terminal-enhancements">Terminal Enhancements</h3> <ul> <li><a href="https://ohmyz.sh/">Oh My Zsh</a>: A framework for managing Zsh configuration. Makes the terminal a bit more user-friendly. <ul> <li>Plugins I use: <ul> <li><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a>: Suggests commands as you type based on history and completions.</li> <li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a>: Provides syntax highlighting for the shell zsh.</li> <li><a href="https://github.com/wting/autojump">autojump</a>: A faster way to navigate your filesystem.</li> </ul> </li> </ul> </li> </ul> <h3 id="productivity-tools">Productivity Tools</h3> <ul> <li><a href="https://www.raycast.com/">Raycast</a>: A launcher that’s more powerful than Spotlight. I use it for quick calculations and most importantly clipboard history. This also has window management, but i am too lazy to switch from rectangle.</li> <li><a href="https://rectangleapp.com/">Rectangle</a>: Simple but effective window management app. Have gotten very used to the shortcuts, never looked back even with the latest MacOS window management.</li> <li><a href="https://www.notion.so/product/calendar">Notion Calendar</a>: This was Cron earlier. Basically alerts me before my meetings and shows it in the menu bar.</li> </ul> <h3 id="development-tools">Development Tools</h3> <ul> <li><a href="https://orbstack.dev/download">Docker client</a>: I use OrbStack as a lightweight Docker client. It is super useful on M1 apps. This works fine for 99% of my use cases. The one time I needed some rosetta customization, I had to use the full Docker Desktop.</li> <li><a href="https://www.warp.dev/">Warp</a>: A new terminal app that supports multiple tabs, multiline editing, longer command history. I don’t like that it asks for signup at the start because it is VC driven so 🤷‍♂️. Skill issue on my part.</li> <li>Cursor: An IDE with AI capabilities. I am faster with this.</li> </ul> <h3 id="web-browsing">Web Browsing</h3> <ul> <li><a href="https://brave.com/">Brave browser</a>: A Chromium-based browser with built-in ad-blocking and tracking prevention.</li> </ul> <h3 id="utilities">Utilities</h3> <ul> <li><a href="https://mos.caldis.me/">Mos App</a>: I use an external mouse and the scrolling direction is reversed. This app fixes that, along with some smoothening of the scrolling.</li> </ul> <h3 id="command-line-tools">Command Line Tools</h3> <ul> <li><a href="https://github.com/sharkdp/bat">bat</a>: A <code class="language-plaintext highlighter-rouge">cat</code> clone with syntax highlighting. Nice for quick file views.</li> <li><a href="https://github.com/junegunn/fzf">fzf</a>: Fuzzy finder for the command line. Great for searching through command history.</li> </ul> <h3 id="note-taking">Note-taking</h3> <ul> <li>Notes: Apple Notes, Google Docs, Cursor</li> </ul> <h3 id="python-environment">Python Environment</h3> <ul> <li><a href="https://docs.astral.sh/uv/">uv</a>: A fast Python package installer and virtual environment manager. I recently switched to this from <a href="https://docs.anaconda.com/miniconda/miniconda-install/">miniconda</a>, which I used previously. So far, uv seems faster and more lightweight, but I’m still in the process of fully transitioning.</li> </ul> <h3 id="some-useful-mac-shortcuts">Some useful mac shortcuts</h3> <ul> <li><code class="language-plaintext highlighter-rouge">fn + delete</code> to delete a word backwards (windows delete key)</li> <li>Press <code class="language-plaintext highlighter-rouge">fn</code> twice to get emoji picker</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + .</code> to view hidden files in finder</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + 3</code> to take a screenshot of the entire screen and save it to the desktop</li> <li><code class="language-plaintext highlighter-rouge">ctrl + cmd + shift + 3</code> to take a screenshot of the entire screen and copy it to the clipboard</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + 4</code> to take a screenshot of the selected window</li> <li><code class="language-plaintext highlighter-rouge">ctrl + cmd + shift + 4</code> to take a screenshot of the selected window and copy it to the clipboard</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + 5</code> to screen record via Quicktime</li> <li><code class="language-plaintext highlighter-rouge">cmd + ~</code> to switch between multiple windows of the same app</li> <li><code class="language-plaintext highlighter-rouge">cmd + tab</code> to switch between apps</li> </ul> <h3 id="some-useful-chrome-shortcuts">Some useful chrome shortcuts</h3> <ul> <li><code class="language-plaintext highlighter-rouge">cmd + option + arrow-keys</code> to switch between tabs in browser (Chrome based ig)</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + t</code> to reopen the last closed tab</li> </ul> <h3 id="some-useful-cursorvscode-shortcuts-macos">Some useful Cursor/VSCode shortcuts (MacOS)</h3> <ul> <li><code class="language-plaintext highlighter-rouge">cmd + shift + p</code> to bring up the command palette</li> <li><code class="language-plaintext highlighter-rouge">cmd + p</code> to bring up the file navigator</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + e</code> to explore the file system</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + f</code> to search for files</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + d</code> to open debugger</li> <li>If you want to move up/down the current line or selection, <code class="language-plaintext highlighter-rouge">alt</code> + <code class="language-plaintext highlighter-rouge">arrow-keys</code> works.</li> <li><code class="language-plaintext highlighter-rouge">cmd + left-arrow</code> to move to the beginning of the line</li> <li><code class="language-plaintext highlighter-rouge">cmd + right-arrow</code> to move to the end of the line</li> <li><code class="language-plaintext highlighter-rouge">cmd + delete</code> to delete the entire line to the left of the cursor</li> <li>Select a word and do <code class="language-plaintext highlighter-rouge">cmd + d</code> to find occurrences of the word in the file. Match for case and exactness on the tooltip that appears.</li> <li>Multiple cursors can be done using <code class="language-plaintext highlighter-rouge">cmd + d</code> or <code class="language-plaintext highlighter-rouge">option + click</code>.</li> </ul> <h2 id="linux-setup">Linux Setup</h2> <h3 id="terminal-enhancements-1">Terminal Enhancements</h3> <ul> <li><a href="https://ohmyz.sh/">Oh My Zsh</a>: Same setup as on macOS. <ul> <li>Plugins: zsh-autosuggestions, zsh-syntax-highlighting, autojump</li> </ul> </li> </ul> <h3 id="docker-installation">Docker Installation</h3> <p>For Linux, I typically install Docker using the official script:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://get.docker.com <span class="nt">-o</span> get-docker.sh
sh get-docker.sh
</code></pre></div></div> <h3 id="nvidia-drivers">Nvidia drivers</h3> <p>Command to install the recommended drivers:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ubuntu-drivers autoinstall
</code></pre></div></div> <p>Will add more here soon.</p> <h3 id="some-useful-terminal-shortcuts-linux">Some useful terminal shortcuts (Linux)</h3> <ul> <li><code class="language-plaintext highlighter-rouge">ctrl + a</code> to move to the beginning of the line</li> <li><code class="language-plaintext highlighter-rouge">ctrl + e</code> to move to the end of the line</li> <li><code class="language-plaintext highlighter-rouge">ctrl + l</code> to clear the screen</li> <li><code class="language-plaintext highlighter-rouge">ctrl + u</code> to delete the entire line</li> <li><code class="language-plaintext highlighter-rouge">ctrl + w</code> to delete the word before the cursor</li> <li><code class="language-plaintext highlighter-rouge">ctrl + r</code> to search through command history</li> <li><code class="language-plaintext highlighter-rouge">ctrl + shift + r</code> to reverse search through command history and execute</li> <li><code class="language-plaintext highlighter-rouge">ctrl + c</code> to cancel the current command</li> <li><code class="language-plaintext highlighter-rouge">ctrl + shift + c</code> to copy the current selection (<code class="language-plaintext highlighter-rouge">cmd + c</code> on macOS)</li> <li><code class="language-plaintext highlighter-rouge">ctrl + shift + v</code> to paste the copied text (<code class="language-plaintext highlighter-rouge">cmd + v</code> on macOS)</li> <li><code class="language-plaintext highlighter-rouge">ctrl + z</code> to suspend the current command</li> <li><code class="language-plaintext highlighter-rouge">ctrl + d</code> to exit the current shell</li> </ul>]]></content><author><name></name></author><category term="tech"/><category term="tech"/><summary type="html"><![CDATA[A comprehensive guide to setting up a development environment on macOS and Linux, including package managers, productivity tools, development tools, and useful shortcuts]]></summary></entry><entry><title type="html">Hello World!</title><link href="https://aakashb95.github.io/blog/2024/hello-world/" rel="alternate" type="text/html" title="Hello World!"/><published>2024-10-06T17:01:00+00:00</published><updated>2024-10-06T17:01:00+00:00</updated><id>https://aakashb95.github.io/blog/2024/hello-world</id><content type="html" xml:base="https://aakashb95.github.io/blog/2024/hello-world/"><![CDATA[<p>Hello World!</p> <p>This is my first blog post.</p> <p>Let’s see how this goes!</p>]]></content><author><name></name></author><category term="misc"/><category term="misc"/><summary type="html"><![CDATA[initial commit]]></summary></entry></feed>