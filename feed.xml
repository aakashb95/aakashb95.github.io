<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://aakashb95.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aakashb95.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-13T18:39:26+00:00</updated><id>https://aakashb95.github.io/feed.xml</id><title type="html">blank</title><subtitle>Hi, I&apos;m Aakash, welcome to my corner of the internet. </subtitle><entry><title type="html">What is an eval and how to make a good one</title><link href="https://aakashb95.github.io/blog/2025/evals/" rel="alternate" type="text/html" title="What is an eval and how to make a good one"/><published>2025-07-13T17:31:00+00:00</published><updated>2025-07-13T17:31:00+00:00</updated><id>https://aakashb95.github.io/blog/2025/evals</id><content type="html" xml:base="https://aakashb95.github.io/blog/2025/evals/"><![CDATA[<h3 id="tldr">TLDR</h3> <ul> <li>Get 15-20 traces, more the merrier. Aim for 100. Write your comments about them, analyze errors.</li> <li>Decide what a good output is and why it is a good output <br/> Have criteria like accuracy, no hallucinations, prompt adherence, etc</li> <li>use OpenAI o3 for evals, give it the input prompt, input context and LLM output to give out a rating</li> </ul> <p>I see evals as unit and integration tests combined. In the normal SWE world, functions, their inputs and outputs are deterministic and you can think of all paths the function can go through and write tests accordingly.</p> <p>For LLMs, the outputs are not deterministic. You will have to keep looking at outputs ‚Äì traces(input, LLM params and outputs). Make notes about them. You need to know what a good output is and what errors look like for your use case.</p> <p>For simpler tasks like sentiment analysis, you would have a csv with text and corresponding correct output labels. Then you would run the LLM on each of the texts, get the corresponding output and compare to get an accuracy score. For such discrete outputs, we can use accuracy, precision, recall and f1-scores</p> <p>The tricky part, and most real world use cases revolve around getting text output from the LLM. A summary may be good by your standards, but not by somebody else on the team. Traditional methods like Bleu or Rouge score don‚Äôt work as business context and nuance gets lost.</p> <p>For complex tasks with varying text outputs, we need another LLM to judge the LLM output. Since text output quality is subjective, it is important to have distinct pillars/axes on which you will evaluate the output.</p> <h4 id="what-makes-a-good-output">What makes a good output?</h4> <ul> <li>It is accurate</li> <li>There are no hallucinations</li> <li>Instructions in the original prompt are adhered to</li> <li>The output covers everything from the inputs in a way that is agreeable to you (use case specific)</li> <li>If you are supplying an image to the LLM, the output should capture the info correctly from it, etc</li> </ul> <p>The judge LLM is like a teacher evaluating a student‚Äôs answer sheet. So it is imperative that the teacher has the same context as the LLM output it is judging.</p> <p>A sample eval prompt would look like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
You are an expert evaluator of &lt;TASK&gt; --&gt; set a persona, describe the task in detail

Inputs provided for the evaluation:

Original prompt given to the LLM
&lt;llm_prompt&gt;

Input context
&lt;llm_input&gt;

Output generated by the LLM
&lt;llm_output&gt;

Evaluation Criteria, Weights, &amp; Scoring (Score 1-5):

Score the llm_output from 1 to 5 for each criterion. Note the weight assigned to each criterion. Assess how well the output accurately reflects the llm_input and adheres to the llm_prompt instructions and format.

1: Poor (Significant failure)
2: Fair (Major issues)
3: Good (Mostly meets basics)
4: Very Good (Minor issues)
5: Excellent (Flawless execution)

For each feedback, give a justification.

List of your axes and weightage --&gt; this will be task specific
1. accuracy (weightage 5)
describe what accuracy means in your context

2. no hallucinations (weightage 3)
describe hallucinations

3. adhereance to inputs (weightage 3)
.
.
.

The final score is a weighted average of all the scores across all the criteria
Return a JSON
{
  {
    </span><span class="sh">"</span><span class="s">criterion</span><span class="sh">"</span><span class="s">: ...,
    </span><span class="sh">"</span><span class="s">accuracy</span><span class="sh">"</span><span class="s"> : &lt;score&gt;,
    </span><span class="sh">"</span><span class="s">justification</span><span class="sh">"</span><span class="s"> : ...
  },
  .
  .
  .
  </span><span class="sh">"</span><span class="s">overall_score</span><span class="sh">"</span><span class="s">: &lt;weighted average&gt;
  </span><span class="sh">"</span><span class="s">overall_assessment</span><span class="sh">"</span><span class="s">: ...
}
</span><span class="sh">'''</span>
</code></pre></div></div> <p>In my experience, <code class="language-plaintext highlighter-rouge">OpenAI o3</code> is the best evaluator. It takes slightly more time but is really thorough and is strict on the scoring. I also made deliberate mistakes, even subtle 2-3 word changes in a 200 word summary and it caught it.</p> <p>Aim to have 100 good samples you can run evals against, for complex tasks or lack of data you should have at least 15-20 good examples. Generate synthetic data if needed.</p> <p>Based on tasks and bandwidth:</p> <ul> <li>you could have different LLMs assess different axis mentioned in the prompt</li> <li>or use different LLMs with the same evals and do a weighted average of all the judges‚Äô scores personally, o3 alone is sufficient</li> </ul>]]></content><author><name></name></author><category term="tech"/><category term="tech,"/><category term="llm"/><summary type="html"><![CDATA[A note on evals]]></summary></entry><entry><title type="html">Dev Setup for macOS and Linux</title><link href="https://aakashb95.github.io/blog/2024/setting-up-my-laptop/" rel="alternate" type="text/html" title="Dev Setup for macOS and Linux"/><published>2024-10-23T17:01:00+00:00</published><updated>2024-10-23T17:01:00+00:00</updated><id>https://aakashb95.github.io/blog/2024/setting-up-my-laptop</id><content type="html" xml:base="https://aakashb95.github.io/blog/2024/setting-up-my-laptop/"><![CDATA[<p>Here‚Äôs a rundown of the tools and applications I use to set up my development environment on both macOS and Linux. These have proven useful in my workflow, but your mileage may vary.</p> <h2 id="macos-setup">macOS Setup</h2> <p>First thing I do is go to Settings -&gt; Trackpad -&gt; Enable Tap to click.</p> <h3 id="package-management">Package Management</h3> <ul> <li><a href="https://brew.sh/">Homebrew</a>: The go-to package manager for macOS. Pretty much essential. But I am thinking of learning <a href="https://nixos.org/">nix</a> for more package management goodness and reproducibility.</li> </ul> <h3 id="terminal-enhancements">Terminal Enhancements</h3> <ul> <li><a href="https://ohmyz.sh/">Oh My Zsh</a>: A framework for managing Zsh configuration. Makes the terminal a bit more user-friendly. <ul> <li>Plugins I use: <ul> <li><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a>: Suggests commands as you type based on history and completions.</li> <li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a>: Provides syntax highlighting for the shell zsh.</li> <li><a href="https://github.com/wting/autojump">autojump</a>: A faster way to navigate your filesystem.</li> </ul> </li> </ul> </li> </ul> <h3 id="productivity-tools">Productivity Tools</h3> <ul> <li><a href="https://www.raycast.com/">Raycast</a>: A launcher that‚Äôs more powerful than Spotlight. I use it for quick calculations and most importantly clipboard history. This also has window management, but i am too lazy to switch from rectangle.</li> <li><a href="https://rectangleapp.com/">Rectangle</a>: Simple but effective window management app. Have gotten very used to the shortcuts, never looked back even with the latest MacOS window management.</li> <li><a href="https://www.notion.so/product/calendar">Notion Calendar</a>: This was Cron earlier. Basically alerts me before my meetings and shows it in the menu bar.</li> </ul> <h3 id="development-tools">Development Tools</h3> <ul> <li><a href="https://orbstack.dev/download">Docker client</a>: I use OrbStack as a lightweight Docker client. It is super useful on M1 apps. This works fine for 99% of my use cases. The one time I needed some rosetta customization, I had to use the full Docker Desktop.</li> <li><a href="https://www.warp.dev/">Warp</a>: A new terminal app that supports multiple tabs, multiline editing, longer command history. I don‚Äôt like that it asks for signup at the start because it is VC driven so ü§∑‚Äç‚ôÇÔ∏è. Skill issue on my part.</li> <li>Cursor: An IDE with AI capabilities. I am faster with this.</li> </ul> <h3 id="web-browsing">Web Browsing</h3> <ul> <li><a href="https://brave.com/">Brave browser</a>: A Chromium-based browser with built-in ad-blocking and tracking prevention.</li> </ul> <h3 id="utilities">Utilities</h3> <ul> <li><a href="https://mos.caldis.me/">Mos App</a>: I use an external mouse and the scrolling direction is reversed. This app fixes that, along with some smoothening of the scrolling.</li> </ul> <h3 id="command-line-tools">Command Line Tools</h3> <ul> <li><a href="https://github.com/sharkdp/bat">bat</a>: A <code class="language-plaintext highlighter-rouge">cat</code> clone with syntax highlighting. Nice for quick file views.</li> <li><a href="https://github.com/junegunn/fzf">fzf</a>: Fuzzy finder for the command line. Great for searching through command history.</li> </ul> <h3 id="note-taking">Note-taking</h3> <ul> <li>Notes: Apple Notes, Google Docs, Cursor</li> </ul> <h3 id="python-environment">Python Environment</h3> <ul> <li><a href="https://docs.astral.sh/uv/">uv</a>: A fast Python package installer and virtual environment manager. I recently switched to this from <a href="https://docs.anaconda.com/miniconda/miniconda-install/">miniconda</a>, which I used previously. So far, uv seems faster and more lightweight, but I‚Äôm still in the process of fully transitioning.</li> </ul> <h3 id="some-useful-mac-shortcuts">Some useful mac shortcuts</h3> <ul> <li><code class="language-plaintext highlighter-rouge">fn + delete</code> to delete a word backwards (windows delete key)</li> <li>Press <code class="language-plaintext highlighter-rouge">fn</code> twice to get emoji picker</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + .</code> to view hidden files in finder</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + 3</code> to take a screenshot of the entire screen and save it to the desktop</li> <li><code class="language-plaintext highlighter-rouge">ctrl + cmd + shift + 3</code> to take a screenshot of the entire screen and copy it to the clipboard</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + 4</code> to take a screenshot of the selected window</li> <li><code class="language-plaintext highlighter-rouge">ctrl + cmd + shift + 4</code> to take a screenshot of the selected window and copy it to the clipboard</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + 5</code> to screen record via Quicktime</li> <li><code class="language-plaintext highlighter-rouge">cmd + ~</code> to switch between multiple windows of the same app</li> <li><code class="language-plaintext highlighter-rouge">cmd + tab</code> to switch between apps</li> </ul> <h3 id="some-useful-chrome-shortcuts">Some useful chrome shortcuts</h3> <ul> <li><code class="language-plaintext highlighter-rouge">cmd + option + arrow-keys</code> to switch between tabs in browser (Chrome based ig)</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + t</code> to reopen the last closed tab</li> </ul> <h3 id="some-useful-cursorvscode-shortcuts-macos">Some useful Cursor/VSCode shortcuts (MacOS)</h3> <ul> <li><code class="language-plaintext highlighter-rouge">cmd + shift + p</code> to bring up the command palette</li> <li><code class="language-plaintext highlighter-rouge">cmd + p</code> to bring up the file navigator</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + e</code> to explore the file system</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + f</code> to search for files</li> <li><code class="language-plaintext highlighter-rouge">cmd + shift + d</code> to open debugger</li> <li>If you want to move up/down the current line or selection, <code class="language-plaintext highlighter-rouge">alt</code> + <code class="language-plaintext highlighter-rouge">arrow-keys</code> works.</li> <li><code class="language-plaintext highlighter-rouge">cmd + left-arrow</code> to move to the beginning of the line</li> <li><code class="language-plaintext highlighter-rouge">cmd + right-arrow</code> to move to the end of the line</li> <li><code class="language-plaintext highlighter-rouge">cmd + delete</code> to delete the entire line to the left of the cursor</li> <li>Select a word and do <code class="language-plaintext highlighter-rouge">cmd + d</code> to find occurrences of the word in the file. Match for case and exactness on the tooltip that appears.</li> <li>Multiple cursors can be done using <code class="language-plaintext highlighter-rouge">cmd + d</code> or <code class="language-plaintext highlighter-rouge">option + click</code>.</li> </ul> <h2 id="linux-setup">Linux Setup</h2> <h3 id="terminal-enhancements-1">Terminal Enhancements</h3> <ul> <li><a href="https://ohmyz.sh/">Oh My Zsh</a>: Same setup as on macOS. <ul> <li>Plugins: zsh-autosuggestions, zsh-syntax-highlighting, autojump</li> </ul> </li> </ul> <h3 id="docker-installation">Docker Installation</h3> <p>For Linux, I typically install Docker using the official script:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://get.docker.com <span class="nt">-o</span> get-docker.sh
sh get-docker.sh
</code></pre></div></div> <h3 id="nvidia-drivers">Nvidia drivers</h3> <p>Command to install the recommended drivers:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ubuntu-drivers autoinstall
</code></pre></div></div> <p>Will add more here soon.</p> <h3 id="some-useful-terminal-shortcuts-linux">Some useful terminal shortcuts (Linux)</h3> <ul> <li><code class="language-plaintext highlighter-rouge">ctrl + a</code> to move to the beginning of the line</li> <li><code class="language-plaintext highlighter-rouge">ctrl + e</code> to move to the end of the line</li> <li><code class="language-plaintext highlighter-rouge">ctrl + l</code> to clear the screen</li> <li><code class="language-plaintext highlighter-rouge">ctrl + u</code> to delete the entire line</li> <li><code class="language-plaintext highlighter-rouge">ctrl + w</code> to delete the word before the cursor</li> <li><code class="language-plaintext highlighter-rouge">ctrl + r</code> to search through command history</li> <li><code class="language-plaintext highlighter-rouge">ctrl + shift + r</code> to reverse search through command history and execute</li> <li><code class="language-plaintext highlighter-rouge">ctrl + c</code> to cancel the current command</li> <li><code class="language-plaintext highlighter-rouge">ctrl + shift + c</code> to copy the current selection (<code class="language-plaintext highlighter-rouge">cmd + c</code> on macOS)</li> <li><code class="language-plaintext highlighter-rouge">ctrl + shift + v</code> to paste the copied text (<code class="language-plaintext highlighter-rouge">cmd + v</code> on macOS)</li> <li><code class="language-plaintext highlighter-rouge">ctrl + z</code> to suspend the current command</li> <li><code class="language-plaintext highlighter-rouge">ctrl + d</code> to exit the current shell</li> </ul>]]></content><author><name></name></author><category term="tech"/><category term="tech"/><summary type="html"><![CDATA[A comprehensive guide to setting up a development environment on macOS and Linux, including package managers, productivity tools, development tools, and useful shortcuts]]></summary></entry><entry><title type="html">Hello World!</title><link href="https://aakashb95.github.io/blog/2024/hello-world/" rel="alternate" type="text/html" title="Hello World!"/><published>2024-10-06T17:01:00+00:00</published><updated>2024-10-06T17:01:00+00:00</updated><id>https://aakashb95.github.io/blog/2024/hello-world</id><content type="html" xml:base="https://aakashb95.github.io/blog/2024/hello-world/"><![CDATA[<p>Hello World!</p> <p>This is my first blog post.</p> <p>Let‚Äôs see how this goes!</p>]]></content><author><name></name></author><category term="misc"/><category term="misc"/><summary type="html"><![CDATA[initial commit]]></summary></entry></feed>